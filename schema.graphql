type Account {
  annualMandate: Float!
  availableBalance: Float!
  balance: Float!
  blockedBalance: Float!
  id: ID!
  rebate: Float!
}

input AccountInput {
  """
  Required for creating a new account.
  """
  annualMandate: Float
  id: ID

  """
  Required for creating a new account.
  """
  rebate: Float
}

type ActiveCode {
  activityName: String!
  applicationId: String!
  codeEnd: Int!
  codeStart: Int!
  comment: String
  createdAt: ISO8601DateTime!
  dealer: Dealer
  id: ID!
  marketCode: MarketCode!
  productBrand: String!
  productCode: String!
  productTitle: String!
  wxaAppid: String!
  wxaPath: String!
  wxaType: Int!
}

type Activity {
  conditions: String
  createdAt: ISO8601DateTime!
  description: String
  endAt: ISO8601DateTime!
  gift: JSON
  id: ID!
  name: String!
  needPurchased: Boolean!
  needSubcribed: Boolean!
  slTable: SlTable!
  startAt: ISO8601DateTime!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Autogenerated return type of ActivityCreate
"""
type ActivityCreatePayload {
  activity: Activity

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

input ActivityInput {
  conditions: String
  description: String
  endAt: ISO8601DateTime

  """
  [{"variant_id": 1, "quantity": 1}]
  """
  gift: JSON
  id: ID
  name: String
  needPurchased: Boolean
  needSubcribed: Boolean
  slTable: SlTableInput
  startAt: ISO8601DateTime
}

"""
Autogenerated return type of ActivityUpdate
"""
type ActivityUpdatePayload {
  activity: Activity

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

type AdReport {
  """
  转化数据（计费时间）-转化数（计费时间）
  """
  attributionConvert: Int!

  """
  转化数据（计费时间）-转化成本（计费时间）
  """
  attributionConvertCost: Float!

  """
  转化数据（计费时间）-深度转化数（计费时间）
  """
  attributionDeepConvert: Int!

  """
  转化数据（计费时间）-深度转化成本（计费时间）
  """
  attributionDeepConvertCost: Float!

  """
  视频数据-平均单次播放时长
  """
  averagePlayTimePerPlay: Float!

  """
  展现数据-平均点击单价
  """
  avgClickCost: Float!

  """
  展现数据-平均千次展现费用
  """
  avgShowCost: Float!

  """
  落地页转化数据-按钮button
  """
  button: Int!

  """
  转化数据-转化数
  """
  convert: Int!

  """
  转化数据-转化成本
  """
  convertCost: Float!

  """
  转化数据-转化率
  """
  convertRate: Float!

  """
  展现数据-总花费
  """
  cost: Float!

  """
  展现数据-点击率
  """
  ctr: Float!

  """
  转化数据-深度转化数
  """
  deepConvert: Int!

  """
  转化数据-深度转化成本
  """
  deepConvertCost: Float!

  """
  转化数据-深度转化率
  """
  deepConvertRate: Float!

  """
  展现数据-总成交
  """
  paidAmount: Float!

  """
  视频数据-100%进度播放数
  """
  play100FeedBreak: Int!

  """
  视频数据-25%进度播放数
  """
  play25FeedBreak: Int!

  """
  视频数据-50%进度播放数
  """
  play50FeedBreak: Int!

  """
  视频数据-75%进度播放数
  """
  play75FeedBreak: Int!

  """
  视频数据-播放时长，单位ms
  """
  playDurationSum: String!

  """
  视频数据-播完率
  """
  playOverRate: Float!

  """
  展现数据-ROI
  """
  roi: Float!

  """
  展现数据-展示数
  """
  show: Int!

  """
  数据起始时间
  """
  statDatetime: String!

  """
  视频数据-播放数
  """
  totalPlay: Int!

  """
  视频数据-有效播放数
  """
  validPlay: Int!

  """
  视频数据-有效播放成本
  """
  validPlayCost: Float!

  """
  视频数据-有效播放率
  """
  validPlayRate: Float!

  """
  落地页转化数据-关键页面浏览
  """
  view: Int!
}

type Address {
  city: String!
  detail: String!
  district: String
  full: String!
  id: ID!
  latitude: Float
  longitude: Float
  province: String!
}

"""
Attributes for address
"""
input AddressInput {
  city: String
  detail: String
  district: String
  id: ID
  province: String
}

type Advertiser {
  advertiserReports(
    endDate: String!
    startDate: String!
    timeGranularity: TimeGranularity = STAT_TIME_GRANULARITY_DAILY
  ): [AdvertiserReport!]!
  agent: String!
  id: ID!
  name: String!
}

type AdvertiserReport {
  """
  投放渠道
  """
  channel: String!

  """
  展现数据-点击数
  """
  clickCount: Int!

  """
  展现数据-总花费
  """
  cost: Float!

  """
  展现数据-点击率
  """
  ctr: Float!

  """
  数据起始时间
  """
  date: String!

  """
  展现数据-总成交
  """
  paidAmount: Float!

  """
  展现数据-ROI
  """
  roi: Float!

  """
  展现数据-展示数
  """
  showCount: Int!
}

"""
广告投放渠道
"""
enum AdvertiserReportChannel {
  """
  AD
  """
  ad

  """
  千川
  """
  qc

  """
  UD
  """
  ud
}

type AdvertiserReportPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [AdvertiserReport!]!
  nodesCount: Int!
  pagesCount: Int!
}

type Agent {
  advertiserReports(
    endDate: String!
    startDate: String!
    timeGranularity: TimeGranularity = STAT_TIME_GRANULARITY_DAILY
  ): [AdReport!]!
  id: ID!
  name: String!
}

type App {
  appType: String
  createdAt: ISO8601DateTime
  id: ID
  name: String
  parentId: String
  permissions: [Permission!]
  url: String
}

"""
Autogenerated return type of AppCreate
"""
type AppCreatePayload {
  app: App

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

"""
Attributes for app.
"""
input AppInput {
  appType: Int!
  id: ID
  name: String
  url: String!
}

type AppPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [App!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
Autogenerated return type of AppUpdate
"""
type AppUpdatePayload {
  app: App

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

type Audit {
  action: String!
  auditableId: ID!
  auditableType: String!
  auditedChanges: JSON!
  auditedTitle: String
  comment: String
  createdAt: ISO8601DateTime!
  id: ID!
  remoteAddress: String
  user: User
}

type AuditPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Audit!]!
  nodesCount: Int!
  pagesCount: Int!
}

type Category {
  createdAt: ISO8601DateTime!
  id: ID!
  name: String!
  position: Int

  """
  Find all products
  """
  products(published: Boolean, withCategory: ID, withInventoryWarning: Boolean): [Product!]
  updatedAt: ISO8601DateTime!
}

"""
Autogenerated return type of CategoryCreate
"""
type CategoryCreatePayload {
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

input CategoryInput {
  id: ID

  """
  Required for creating a new category.
  """
  name: String

  """
  Required for creating a new category.
  """
  position: Int
}

"""
Autogenerated return type of CategoryUpdate
"""
type CategoryUpdatePayload {
  category: Category

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

type Charge {
  amount: Float!
  attachments: [String!]
  chargedAt: ISO8601DateTime!
  dealer: Dealer!
  id: ID!
  notes: String
  orders: [Order!]

  """
  pendding, approved
  """
  state: String!
}

"""
Autogenerated return type of ChargeCreate
"""
type ChargeCreatePayload {
  charge: Charge

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

"""
Attributes for charge.
"""
input ChargeInput {
  amount: Float

  """
  Signed blob ID generated via `DirectUploadcreate` mutation
  """
  attachments: [String!]
  chargedAt: ISO8601DateTime
  dealerId: ID
  id: ID
  notes: String
}

type ChargePage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Charge!]!
  nodesCount: Int!
  pagesCount: Int!
}

type CostVerify {
  combined: [Variant!]
  invalidFinishedCost: [Variant!]
  invalidOriginCost: [Variant!]
  leaves: [Variant!]
  notEqual: [Variant!]
  total: Int!
}

type Dashboard {
  annualCharge: Float!
  annualExpense: Float!
  annualSales: Float!
  annualShopSales: Float!
  dailyAdCost: JSON!
  dailyAdRoi(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON!
  dailyAdSales: JSON!
  dailyOverview(date: ISO8601DateTime!): JSON!
  dailyShopSales: JSON!
  dealerChargeBetween(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON!
  dealerChargeRank: JSON!
  dealerReceivable: JSON!
  dealerSalesBetween(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON!
  dealerSalesRank: JSON!
  dealersCount: Float!
  monthCharge: Float!
  monthSales: Float!
  monthShopSales: Float!
  monthlyAdCost: JSON!
  monthlyAdSales: JSON!
  monthlyCharge: JSON!
  monthlyExpense: JSON!
  monthlyProductSales(productId: ID!): JSON!
  monthlySales: JSON!
  monthlyShopSales: JSON!
  ordersCount: Float!
  quarterCharge: Float!
  quarterSales: Float!
  quarterShopSales: Float!
  salesChargeRankBetween(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON!
  shopVariantSalesRank: JSON!
  totalBuyerCount: Int!
  totalCharge: Float!
  totalExpense: Float!
  totalReceivable: Float!
  totalSales: Float!
  totalShopSales: Float!
  variantSalesRank: JSON!
  weekCharge: Float!
  weekSales: Float!
  weekShopSales: Float!
  weeklyAdCost: JSON!
  weeklyAdSales: JSON!
  weeklyCharge: JSON!
  weeklySales: JSON!
  weeklyShopSales: JSON!
}

type Dealer {
  account: Account
  activeCode: [ActiveCode!]
  activeCodeLabels: String
  address: Address!
  allowableArrears: Boolean!
  annualCharge: Float!
  annualExpense: Float!
  annualProfit: Float!
  annualSales: Float!
  averageBottleQuantity: Int!
  channel: String!
  charges: [Charge!]!
  code: String!
  commissionRate: String
  createdAt: ISO8601DateTime!
  dealerType: String!
  expenseAccount: ExpenseAccount
  expenses: [Expense!]!
  id: ID!
  inventoryItems: [InventoryItem!]
  lastAnnualSales: Float!
  level: Int!
  marketScope: String
  monthlyBoxedCount: JSON!
  monthlyCharge: JSON!
  monthlyCommission: JSON!
  monthlyExpense: JSON!
  monthlyOrderCost: JSON!
  monthlySales: JSON!
  name: String!
  nickname: String
  notes: String
  orderCount: Int!
  orders: [Order!]!
  principal: Principal!
  shippingAddresses: [ShippingAddress!]
  source: String
  terminals: [Terminal!]!
  totalBottleCount: Int!
  totalCharge: Float!
  totalExpense: Float!
  totalProfit: Float!
  totalSales: Float!
  transfers: [Transfer!]!
  user: User!
}

"""
Autogenerated return type of DealerCreate
"""
type DealerCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dealer: Dealer
  errors: ValidationErrors
}

"""
Specifies the input fields required to create or update a dealer.
"""
input DealerInput {
  """
  The account associated with the dealer.
  """
  account: AccountInput

  """
  The address associated with the dealer.
  """
  address: AddressInput
  allowableArrears: Boolean

  """
  Required for creating a new dealer.
  """
  channel: String
  commissionRate: Float

  """
  The type of dealer.
  """
  dealerType: DealerType! = guanyun

  """
  Specifies the dealer to update or create a new dealer if absent.
  """
  id: ID

  """
  Required for creating a new dealer.
  """
  level: Int

  """
  Required for creating a new dealer.
  """
  marketScope: String

  """
  Required for creating a new dealer.
  """
  name: String

  """
  The nickname associated with the dealer.
  """
  nickname: String
  notes: String

  """
  The principal associated with the dealer.
  """
  principal: PrincipalInput
  source: String

  """
  The user associated with the dealer.
  """
  userId: Int
}

type DealerPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Dealer!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
经销商类型
"""
enum DealerType {
  """
  观云
  """
  guanyun

  """
  内部
  """
  internal

  """
  其他
  """
  other

  """
  元气
  """
  yuanqi
}

"""
Autogenerated return type of DealerUpdate
"""
type DealerUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dealer: Dealer
  errors: ValidationErrors
}

"""
Represents direct upload credentials
"""
type DirectUpload {
  """
  Created blob record ID
  """
  blobId: ID!

  """
  HTTP request headers (JSON-encoded)
  """
  headers: String!

  """
  Created blob key
  """
  key: String!

  """
  Created blob record signed ID
  """
  signedBlobId: ID!

  """
  Upload URL
  """
  url: String!
}

"""
Autogenerated return type of DirectUploadCreate
"""
type DirectUploadCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  directUpload: DirectUpload!
}

"""
File information required to prepare a direct upload
"""
input DirectUploadInput {
  """
  File size (bytes)
  """
  byteSize: Int!

  """
  MD5 file checksum as base64
  """
  checksum: String!

  """
  File content type
  """
  contentType: String!

  """
  Original file name
  """
  filename: String!
}

enum ExpensableEnum {
  DEALER
  SHOP
}

"""
Properties of Expense
"""
union ExpensableType = Dealer | Shop

type Expense {
  amount: Float!
  attachments: [String!]
  expensable: ExpensableType!
  expenseType: String!
  expensedAt: ISO8601DateTime!
  id: ID!
  notes: String

  """
  pendding, approved
  """
  state: String!
}

type ExpenseAccount {
  balance: Float
  id: ID!
  transfers: [Transfer!]
}

"""
Autogenerated return type of ExpenseCreate
"""
type ExpenseCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  expense: Expense
}

"""
Attributes for expense.
"""
input ExpenseInput {
  amount: Float

  """
  Signed blob ID generated via `DirectUploadcreate` mutation
  """
  attachments: [String!]

  """
  dealer_id or shop_id
  """
  expensableId: ID

  """
  Dealer or Shop
  """
  expensableType: ID
  expenseType: String
  expensedAt: ISO8601DateTime
  id: ID
  notes: String
}

type ExpensePage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Expense!]!
  nodesCount: Int!
  pagesCount: Int!
}

type FeishuUser {
  id: ID!
  openId: String!
  userName: String
}

type FreeOrder {
  createdAt: ISO8601DateTime!
  feishuUser: FeishuUser!
  id: ID!
  instanceCode: String
  items: [FreeOrderItem!]!
  notes: String
  orderType: String!
  purpose: String!
  shippingAddress: ShippingAddress!
  state: String!
  updatedAt: ISO8601DateTime!
}

type FreeOrderItem {
  id: ID!
  quantity: Int!
  variant: Variant!
}

type FreeOrderPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [FreeOrder!]!
  nodesCount: Int!
  pagesCount: Int!
}

type Hierarchy {
  id: ID!
  parent: Variant!
  quantity: Int!
  variant: Variant!
}

"""
Attributes for hierarchy.
"""
input HierarchyInput {
  _destroy: Boolean
  id: ID
  quantity: Int
  variantId: ID
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type InStore {
  id: ID!
  inStoreDate: ISO8601DateTime!
  inStoreItems: [InStoreItem!]!
  inStoreType: InStoreType!
  notes: String
  outStoreId: ID

  """
  pendding, completed
  """
  state: String!
  user: User!
}

"""
Autogenerated input type of InStoreComplete
"""
input InStoreCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of InStoreComplete
"""
type InStoreCompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inStore: InStore
}

"""
Autogenerated return type of InStoreCreate
"""
type InStoreCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inStore: InStore
}

input InStoreInput {
  id: ID
  inStoreDate: ISO8601DateTime
  inStoreItems: [InStoreItemInput!]
  inStoreType: InStoreType
  notes: String
  outStoreId: ID
}

type InStoreItem {
  afterUnitCost: Float
  id: ID!
  notes: String
  preQuantity: Int
  preUnitCost: Float
  quantity: Int
  unitCost: Float
  variant: Variant
}

input InStoreItemInput {
  _destroy: Boolean
  id: ID
  inStoreId: ID
  quantity: Int
  unitCost: Float
  variantId: ID
}

type InStorePage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [InStore!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
入库类型
"""
enum InStoreType {
  """
  生产入库
  """
  production

  """
  退货入库
  """
  returns

  """
  原材料入库
  """
  sourcing
}

"""
Autogenerated return type of InStoreUpdate
"""
type InStoreUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inStore: InStore
}

enum InStoresOrder {
  ID
  RECENT
}

"""
Type of Inventory Cause
"""
union InventoryCauseType = InStore | InventoryCheck | OutStore

type InventoryCheck {
  checkDate: ISO8601DateTime!
  id: ID!
  inventoryCheckItems: [InventoryCheckItem!]!
  notes: String

  """
  pendding, completed
  """
  state: String!
  user: User!
}

"""
Autogenerated input type of InventoryCheckComplete
"""
input InventoryCheckCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of InventoryCheckComplete
"""
type InventoryCheckCompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inventoryCheck: InventoryCheck
}

"""
Autogenerated return type of InventoryCheckCreate
"""
type InventoryCheckCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inventoryCheck: InventoryCheck
}

"""
Autogenerated input type of InventoryCheckDelete
"""
input InventoryCheckDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of InventoryCheckDelete
"""
type InventoryCheckDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inventoryCheck: InventoryCheck
}

input InventoryCheckInput {
  checkDate: ISO8601DateTime
  id: ID
  inventoryCheckItems: [InventoryCheckItemInput!]
  notes: String
}

type InventoryCheckItem {
  beginningQuantity: Int!
  endingQuantity: Int!
  id: ID!
  notes: String
  variant: Variant!
}

input InventoryCheckItemInput {
  _destroy: Boolean
  beginningQuantity: Int
  endingQuantity: Int
  id: ID
  inventoryCheckId: ID
  notes: String
  variantId: ID
}

type InventoryCheckPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [InventoryCheck!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
Autogenerated return type of InventoryCheckUpdate
"""
type InventoryCheckUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inventoryCheck: InventoryCheck
}

type InventoryItem {
  createdAt: ISO8601DateTime!
  dealer: Dealer
  id: ID!
  quantity: Int!
  updatedAt: ISO8601DateTime!
  variant: Variant!
}

"""
Autogenerated input type of InventoryItemUpdateQuantity
"""
input InventoryItemUpdateQuantityInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  inventoryItemId: ID!
  quantity: Int!
}

"""
Autogenerated return type of InventoryItemUpdateQuantity
"""
type InventoryItemUpdateQuantityPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  inventoryItem: InventoryItem
}

type InventoryLog {
  adjustment: Int
  causedBy: InventoryCauseType
  causedById: ID
  causedByType: String
  createdAt: ISO8601DateTime
  endingQuantity: Int
  id: ID!
  updatedAt: ISO8601DateTime
}

type InventoryLogPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [InventoryLog!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
Represents untyped JSON
"""
scalar JSON

type LineItem {
  createdAt: ISO8601DateTime
  id: ID!
  order: Order
  price: Float
  quantity: Int
  rebateAmount: Float
  rebateRatio: Float
  totalCost: Float
  totalPrice: Float
  updatedAt: ISO8601DateTime
  variant: Variant
}

"""
Attributes for lineItem
"""
input LineItemInput {
  price: Float
  quantity: Int!
  variantId: ID!
}

type LiveGmv {
  channelList: JSON
  expenses: JSON
  feedsAmount: Int!
  id: ID!
  liveDate: ISO8601Date!
  locked: Boolean!
  refunds: Int!
}

input LiveGmvInput {
  """
  资金及广告投入
  """
  expenses: JSON

  """
  信息流销售金额
  """
  feedsAmount: Int
  id: ID!

  """
  锁定后，从抓取数据接口过来的请求将不导致更新
  """
  locked: Boolean

  """
  退款金额
  """
  refunds: Int
}

"""
Autogenerated return type of LiveGmvUpdate
"""
type LiveGmvUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  liveGmv: LiveGmv
}

type LiveReport {
  conversion: JSON
  endTime: Int!
  id: ID!
  liveDate: ISO8601Date
  locked: Boolean!
  nickname: String!
  shortId: String!
  startTime: Int!
  trafficStructure: JSON
}

input ManufactureItemInput {
  _destroy: Boolean
  id: ID
  outStoreId: ID
  quantity: Int
  variantId: ID
}

type ManyfactureItem {
  id: ID!
  notes: String
  quantity: Int!
  variant: Variant!
}

type MarketCode {
  applicationId: String!
  availableCode: [[Int!]!]!
  codeCount: Int!
  id: ID!
  isvApplicationId: String!
}

type Mutation {
  activityCreate(input: ActivityInput!): ActivityCreatePayload
  activityUpdate(input: ActivityInput!): ActivityUpdatePayload
  appCreate(input: AppInput!): AppCreatePayload
  appUpdate(input: AppInput!): AppUpdatePayload
  categoryCreate(input: CategoryInput!): CategoryCreatePayload
  categoryUpdate(input: CategoryInput!): CategoryUpdatePayload
  chargeCreate(input: ChargeInput!): ChargeCreatePayload
  dealerCreate(input: DealerInput!): DealerCreatePayload
  dealerUpdate(input: DealerInput!): DealerUpdatePayload
  directUploadCreate(input: DirectUploadInput!): DirectUploadCreatePayload
  expenseCreate(input: ExpenseInput!): ExpenseCreatePayload
  inStoreComplete(input: InStoreCompleteInput!): InStoreCompletePayload
  inStoreCreate(input: InStoreInput!): InStoreCreatePayload
  inStoreUpdate(input: InStoreInput!): InStoreUpdatePayload
  inventoryCheckComplete(input: InventoryCheckCompleteInput!): InventoryCheckCompletePayload
  inventoryCheckCreate(input: InventoryCheckInput!): InventoryCheckCreatePayload
  inventoryCheckDelete(input: InventoryCheckDeleteInput!): InventoryCheckDeletePayload
  inventoryCheckUpdate(input: InventoryCheckInput!): InventoryCheckUpdatePayload
  inventoryItemUpdateQuantity(
    input: InventoryItemUpdateQuantityInput!
  ): InventoryItemUpdateQuantityPayload
  liveGmvUpdate(input: LiveGmvInput!): LiveGmvUpdatePayload
  orderCancel(input: OrderCancelInput!): OrderCancelPayload
  orderComplete(input: OrderCompleteInput!): OrderCompletePayload
  orderCreate(input: OrderCreateInput!): OrderCreatePayload
  orderNotify(input: OrderNotifyInput!): OrderNotifyPayload
  orderReconcile(input: OrderReconcileInput!): OrderReconcilePayload
  orderRefund(input: OrderRefundInput!): OrderRefundPayload
  outStoreComplete(input: OutStoreCompleteInput!): OutStoreCompletePayload
  outStoreCreate(input: OutStoreInput!): OutStoreCreatePayload
  outStoreUpdate(input: OutStoreInput!): OutStoreUpdatePayload
  permissionCreate(input: PermissionInput!): PermissionCreatePayload
  permissionUpdate(input: PermissionInput!): PermissionUpdatePayload
  planCreate(input: PlanInput!): PlanCreatePayload
  planUpdate(input: PlanInput!): PlanUpdatePayload
  productCreate(input: ProductInput!): ProductCreatePayload
  productUpdate(input: ProductInput!): ProductUpdatePayload
  receiptCreate(input: ReceiptInput!): ReceiptCreatePayload
  salesPlanComplete(input: SalesPlanCompleteInput!): SalesPlanCompletePayload
  salesPlanContinue(input: SalesPlanContinueInput!): SalesPlanContinuePayload
  salesPlanSave(input: SalesPlanInput!): SalesPlanSavePayload
  shipmentImportShunfengBill(
    input: ShipmentImportShunfengBillInput!
  ): ShipmentImportShunfengBillPayload
  shipmentSyncRoutes(input: ShipmentSyncRoutesInput!): ShipmentSyncRoutesPayload
  shipmentUpdateCost(input: ShipmentUpdateCostInput!): ShipmentUpdateCostPayload
  shippingAddressCreate(input: ShippingAddressInput!): ShippingAddressCreatePayload
  shippingAddressSetDefault(
    input: ShippingAddressSetDefaultInput!
  ): ShippingAddressSetDefaultPayload
  shippingAddressUpdate(input: ShippingAddressInput!): ShippingAddressUpdatePayload
  shopCreate(input: ShopInput!): ShopCreatePayload
  shopUpdate(input: ShopInput!): ShopUpdatePayload
  signIn(input: SignInInput!): SignInPayload
  slRowApprove(input: SlRowApproveInput!): SlRowApprovePayload
  slRowReject(input: SlRowRejectInput!): SlRowRejectPayload
  terminalCreate(input: TerminalInput!): TerminalCreatePayload
  terminalDelete(input: TerminalDeleteInput!): TerminalDeletePayload
  terminalUpdate(input: TerminalInput!): TerminalUpdatePayload
  terminalVisitCreate(input: TerminalVisitInput!): TerminalVisitCreatePayload
  terminalVisitDelete(input: TerminalVisitDeleteInput!): TerminalVisitDeletePayload
  terminalVisitUpdate(input: TerminalVisitInput!): TerminalVisitUpdatePayload
  userBatchCreate(input: UserBatchInput!): UserBatchCreatePayload
  userChangePassword(input: UserChangePasswordInput!): UserChangePasswordPayload
  userCreate(input: UserInput!): UserCreatePayload
  userUpdate(input: UserInput!): UserUpdatePayload
  variantCreate(input: VariantInput!): VariantCreatePayload
  variantSync(input: VariantSyncInput!): VariantSyncPayload
  variantUpdate(input: VariantInput!): VariantUpdatePayload
  variantsBatchUpdate(input: VariantsBatchUpdateInput!): VariantsBatchUpdatePayload
  variantsUpdate(input: VariantsUpdateInput!): VariantsUpdatePayload
  workOrderBlender(input: WorkOrderBlenderInput!): WorkOrderBlenderPayload
  workOrderCreate(input: WorkOrderCreateInput!): WorkOrderCreatePayload
}

type OfflineReport {
  orders(page: Int, perPage: Int): OrderPage!
  totalCost: Float!
  totalExpense: Float!
  totalProfit: Float!
  totalSales: Float!
  totalShipmentCost: Float!
  variantSales: JSON!
  variantTopSales: JSON!
  yuanqiTopSales: JSON!
}

type OnlineReport {
  adCost: Float
  areaSales: JSON
  orderCount: Int
  orders(page: Int, perPage: Int): ShopOrderPage
  shops: JSON
  totalCost: Float!
  totalExpense: Float!
  totalProfit: Float!
  totalSales: Float!
  totalShipmentCost: Float!
  variantSales: JSON!
  variantTopSales: JSON!
}

type Order {
  approvedAt: ISO8601DateTime
  bottleCount: Int!
  bottleQuantity: Int!
  cancelledAt: ISO8601DateTime
  charge: Charge
  commission: Float!
  commissionRate: Float!
  completedAt: ISO8601DateTime
  createdAt: ISO8601DateTime!
  dealer: Dealer!
  discountedAmount: Float!
  id: ID!
  lineItems: [LineItem!]!
  notes: String
  rebateAmount: Float
  receiptList: [Receipt!]
  reconciledAt: ISO8601DateTime
  reconciler: User
  rsaApprover: User!
  shipment: Shipment
  shippingAddress: ShippingAddress!
  state: String!
  totalCost: Float!
  totalPrice: Float!
  totalProfit: Float!
  updatedAt: ISO8601DateTime!
  user: User!
}

"""
Autogenerated input type of OrderCancel
"""
input OrderCancelInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OrderCancel
"""
type OrderCancelPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

"""
Autogenerated input type of OrderComplete
"""
input OrderCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OrderComplete
"""
type OrderCompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

"""
Autogenerated input type of OrderCreate
"""
input OrderCreateInput {
  """
  The charge associated with the order.
  """
  chargeId: Int

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  The dealer associated with the order.
  """
  dealerId: Int!
  discountedAmount: Float

  """
  The line items associated with the order.
  """
  lineItems: [LineItemInput!]!
  notes: String

  """
  The RSA approver for this order.
  """
  rsaApproverId: Int

  """
  The shipping address associated with the order.
  """
  shippingAddress: ShippingAddressInput!
}

"""
Autogenerated return type of OrderCreate
"""
type OrderCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

"""
Autogenerated input type of OrderNotify
"""
input OrderNotifyInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OrderNotify
"""
type OrderNotifyPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

type OrderPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Order!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
Autogenerated input type of OrderReconcile
"""
input OrderReconcileInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OrderReconcile
"""
type OrderReconcilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

"""
Autogenerated input type of OrderRefund
"""
input OrderRefundInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OrderRefund
"""
type OrderRefundPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
}

type OutStore {
  id: ID!
  inStore: InStore
  manufactureItems: [ManyfactureItem!]!
  notes: String
  outStoreDate: ISO8601DateTime!
  outStoreItems: [OutStoreItem!]!
  outStoreType: OutStoreType!

  """
  pendding, completed
  """
  state: String!
  user: User!
}

"""
Autogenerated input type of OutStoreComplete
"""
input OutStoreCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of OutStoreComplete
"""
type OutStoreCompletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  outStore: OutStore
}

"""
Autogenerated return type of OutStoreCreate
"""
type OutStoreCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  outStore: OutStore
}

input OutStoreInput {
  id: ID
  manufactureItems: [ManufactureItemInput!]
  notes: String
  outStoreDate: ISO8601DateTime
  outStoreItems: [OutStoreItemInput!]
  outStoreType: OutStoreType
}

type OutStoreItem {
  id: ID!
  notes: String
  quantity: Int!
  variant: Variant!
}

input OutStoreItemInput {
  _destroy: Boolean
  id: ID
  outStoreId: ID
  quantity: Int
  variantId: ID
}

type OutStorePage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [OutStore!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
出库类型
"""
enum OutStoreType {
  """
  回酒出库
  """
  defective

  """
  生产出库
  """
  production

  """
  销售出库
  """
  sales
}

"""
Autogenerated return type of OutStoreUpdate
"""
type OutStoreUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  outStore: OutStore
}

enum OutStoresOrder {
  ID
  RECENT
}

type Permission {
  app: App
  createdAt: ISO8601DateTime
  enabled: Boolean
  id: ID!
  masterId: String
  masterName: String
  masterType: String
  opcode: Int
}

"""
Autogenerated return type of PermissionCreate
"""
type PermissionCreatePayload {
  app: App

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  permission: Permission
}

"""
Attributes for permission.
"""
input PermissionInput {
  appId: String!
  enabled: Boolean
  id: ID
  masterId: String!
  masterName: String
  masterType: Int!
}

"""
Autogenerated return type of PermissionUpdate
"""
type PermissionUpdatePayload {
  app: App

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  permission: Permission
}

type Plan {
  closeAt: ISO8601DateTime
  endAt: ISO8601DateTime!
  id: ID!
  name: String
  planType: String
  salesPlans: [SalesPlan!]!
  startAt: ISO8601DateTime!
}

"""
Autogenerated return type of PlanCreate
"""
type PlanCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  plan: Plan
}

"""
Attributes for plan.
"""
input PlanInput {
  """
  计划填写截止日
  """
  closeAt: ISO8601DateTime
  endAt: ISO8601DateTime!
  id: ID

  """
  plan name
  """
  name: String

  """
  plan type
  """
  planType: String
  startAt: ISO8601DateTime!
  userId: ID!
}

"""
Autogenerated return type of PlanUpdate
"""
type PlanUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  plan: Plan
}

type Principal {
  age: Int
  birthday: ISO8601Date
  email: String
  hobby: String
  id: ID!
  name: String!
  phone: String!
  wechat: String!
}

"""
Attributes for principal
"""
input PrincipalInput {
  age: Int
  birthday: ISO8601Date
  email: String
  hobby: String
  id: ID
  name: String
  phone: String
  wechat: String
}

type PrivateReport {
  dailyCustomer: JSON!
  dailySales: JSON!
  monthlyCustomer: JSON!
  monthlySales: JSON!
  topCustomers: JSON!
  totalSales: JSON!
  weeklyCustomer: JSON!
  weeklySales: JSON!
}

type Product {
  category: Category
  createdAt: ISO8601DateTime!
  description: String
  enableSaleTax: Boolean!
  id: ID!
  imageUrl: String
  inventoryWarningVariants: [Variant!]!
  leadTime: Float
  published: Boolean!
  title: String!
  updatedAt: ISO8601DateTime!
  variants: [Variant!]!
}

"""
Autogenerated return type of ProductCreate
"""
type ProductCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  product: Product
}

"""
Specifies the input fields required to create or update a product.
"""
input ProductInput {
  """
  Specifies the product to update or create a new product if absent.
  """
  categoryId: ID
  description: String
  enableSaleTax: Boolean

  """
  Specifies the product to update or create a new product if absent.
  """
  id: ID

  """
  Image for product
  """
  imageUrl: String
  leadTime: Float
  published: Boolean

  """
  Required for creating a new product.
  """
  title: String
  variants: [VariantInput!]
}

"""
Autogenerated return type of ProductUpdate
"""
type ProductUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  product: Product
}

type Query {
  """
  Find ActiveCode
  """
  activeCode(dealerId: ID): [ActiveCode!]

  """
  Find all activities
  """
  activities: [Activity!]

  """
  Find a activity
  """
  activity(id: ID!): Activity

  """
  Find all advertiser_reports
  """
  advertiserReports(channel: AdvertiserReportChannel, page: Int, perPage: Int): AdvertiserReportPage

  """
  Find all advertisers
  """
  advertisers: [Advertiser!]

  """
  Find all advertisers
  """
  agents: [Agent!]

  """
  Find all dealers
  """
  allDealers(dealerType: String, ids: [ID!]): [Dealer!]

  """
  find all departments
  """
  allDepartments: JSON

  """
  Find all roles
  """
  allRoles: [Role!]

  """
  Find all variants
  """
  allVariants: [Variant!]

  """
  Find an app
  """
  app(id: ID!): App

  """
  Find all apps with pagination
  """
  apps(page: Int, perPage: Int): AppPage

  """
  Find all Audits
  """
  audits(page: Int, perPage: Int, staffOnly: Boolean, variantId: ID): AuditPage

  """
  Get dealers that birthday coming in two weeks
  """
  birthdayUpcomingDealers: [Dealer!]

  """
  Find all categories
  """
  categories: [Category!]

  """
  Find a category
  """
  category(id: ID!): Category

  """
  Find all Charges
  """
  charges(dealerId: ID, page: Int, perPage: Int): ChargePage

  """
  Check variant cost price
  """
  costVerify(categoryId: ID!): CostVerify

  """
  Get information about current user
  """
  currentUser: User

  """
  Dashboard queries
  """
  dashboard: Dashboard

  """
  Find a dealer
  """
  dealer(id: ID!): Dealer

  """
  Find all dealers with pagination
  """
  dealers(
    code: String
    dealerType: String
    ids: [ID!]
    page: Int
    perPage: Int
    q: String
  ): DealerPage

  """
  check permission for feishu departments
  """
  departmentPermission(appUrl: String!, departmentIds: [ID!]!): Boolean
  erpOutStoreItems(outStoreDate: ISO8601DateTime!): JSON

  """
  Get all variants has erpcode
  """
  erpVariants: [Variant!]

  """
  check if erpcode exists
  """
  erpcodeExists(erpcode: String!): Boolean

  """
  Find one expense
  """
  expense(id: ID!): Expense

  """
  List expenses by page
  """
  expenses(
    expensable: ExpensableEnum = DEALER
    expensableId: ID
    page: Int
    perPage: Int
  ): ExpensePage

  """
  Find all finished variants
  """
  finishedVariants: [Variant!]

  """
  Find all internal free orders
  """
  freeOrders(orderType: String, page: Int, perPage: Int): FreeOrderPage

  """
  Find InStore
  """
  inStore(id: ID!): InStore

  """
  Find all in_stores
  """
  inStores(
    dateRange: [ISO8601DateTime!]
    manufacture: Boolean
    order: InStoresOrder = RECENT
    page: Int
    perPage: Int
    type: InStoreType = production
  ): InStorePage

  """
  Find InventoryCheck
  """
  inventoryCheck(id: ID!): InventoryCheck

  """
  Find all inventory_checks
  """
  inventoryChecks(page: Int, perPage: Int): InventoryCheckPage

  """
  Get deficient variants
  """
  inventoryWarningVariants: [Variant!]

  """
  Find all variants without hierarchies
  """
  leafVariants: [Variant!]

  """
  Find all live gmv data
  """
  liveGmv(endDate: ISO8601Date, liveDate: ISO8601Date, startDate: ISO8601Date): [LiveGmv!]

  """
  Find all live reports
  """
  liveReport(
    endDate: ISO8601Date
    liveDate: ISO8601Date
    shortId: ID
    startDate: ISO8601Date
  ): [LiveReport!]

  """
  Find MarketCode
  """
  marketCode(id: ID!): MarketCode

  """
  Find all MarketCode
  """
  marketCodes: [MarketCode!]

  """
  Find all material variants
  """
  materialVariants: [Variant!]

  """
  Find offline report
  """
  offlineReport(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): OfflineReport

  """
  Find online report
  """
  onlineReport(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): OnlineReport
  onlineSalesRegionDistribution: JSON

  """
  Find order
  """
  order(id: ID!): Order

  """
  Find all orders
  """
  orders(
    dealerId: ID
    orderTime: [ISO8601DateTime!]
    page: Int
    perPage: Int
    q: String
    trackingNumbers: [String!]
    type: String
  ): OrderPage

  """
  Find OutStore
  """
  outStore(id: ID!): OutStore

  """
  Find all out_stores
  """
  outStores(
    dateRange: [ISO8601DateTime!]
    order: OutStoresOrder = RECENT
    page: Int
    perPage: Int
    type: OutStoreType = sales
  ): OutStorePage

  """
  Find Plan
  """
  plan(id: ID!): Plan

  """
  Find Plans
  """
  plans: [Plan!]

  """
  Find private report
  """
  privateReport(shopId: ID): PrivateReport

  """
  Find all private shops
  """
  privateShops: [Shop!]

  """
  Find a product
  """
  product(id: ID!): Product

  """
  Find all products
  """
  products(published: Boolean, withCategory: ID, withInventoryWarning: Boolean): [Product!]

  """
  Find all RawProducts
  """
  rawProducts: [RawProduct!]

  """
  Find Sales Plans
  """
  salesPlans(at: String, ids: [ID!]): [SalesPlan!]

  """
  Find one salesman
  """
  salesman(feishuOpenId: ID, id: ID): Salesman

  """
  find employees by name
  """
  searchEmployees(employeeName: String!, feishuAccessToken: String!): JSON

  """
  Find shop
  """
  shop(id: ID!): Shop

  """
  Find shop_order
  """
  shopOrder(id: ID!): ShopOrder

  """
  sync shop_order from erp
  """
  shopOrderSync: Boolean

  """
  Find all shop_orders
  """
  shopOrders(
    orderByOid: String
    orderTime: [ISO8601DateTime!]
    page: Int
    payTime: [ISO8601DateTime!]
    perPage: Int
    sendTime: [ISO8601DateTime!]
    shopId: ID
    shopUserId: ID
    status: String
  ): ShopOrderPage

  """
  Find shop_user
  """
  shopUser(id: ID!): ShopUser

  """
  Find all shop_users
  """
  shopUsers(order: ShopUsersOrder = RECENT, page: Int, perPage: Int, phone: String): ShopUserPage

  """
  Find all shops
  """
  shops(first: Int, ids: [ID!]): [Shop!]

  """
  Find all Storages
  """
  storages: [Storage!]

  """
  Find all Tags
  """
  tags(page: Int, perPage: Int): TagPage

  """
  Find a Terminal
  """
  terminal(id: ID!): Terminal

  """
  Find a Terminal Visit
  """
  terminalVisit(id: ID!): TerminalVisit

  """
  Find all Terminal Visits
  """
  terminalVisits: [TerminalVisit!]

  """
  Find all terminal
  """
  terminals: [Terminal!]

  """
  Find all variants exclude finished
  """
  unfinishedVariants: [Variant!]

  """
  check permission for a feishu user
  """
  userPermission(appUrl: String!, userId: String!): Boolean

  """
  Find all users
  """
  users(all: Boolean = false, id: [ID!], phone: [String!], role: String): [User!]

  """
  Find a variant
  """
  variant(id: ID!): Variant

  """
  Find variants with pagination
  """
  variants(
    byCategory: ID
    ids: [ID!]
    overInventory: Boolean
    page: Int
    perPage: Int
    productIds: [ID!]

    """
    Fuzzy title matching
    """
    q: String
    tags: [String!]
  ): VariantPage

  """
  find weather reports
  """
  weathers: [Weather!]

  """
  Find all WorkOrders
  """
  workOrders: [WorkOrder!]
}

type RawProduct {
  degree: Float!
  id: ID!
  name: String!
  recipe: JSON!
  stock: Float!
}

type Receipt {
  allSigned: Boolean!
  attachments: [String!]!
  id: ID!
  notes: String
  order: Order!
  receiptTime: String!
  state: String!
}

"""
Autogenerated return type of ReceiptCreate
"""
type ReceiptCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  order: Order
  receipt: Receipt
}

"""
Attributes for receipt.
"""
input ReceiptInput {
  """
  Signed blob ID generated via `DirectUploadcreate` mutation
  """
  attachments: [String!]!
  notes: String
  orderId: String!
  receiptTime: ISO8601DateTime!
  state: String!
}

type Role {
  id: ID!
  name: String!
  users: [User!]
}

type SalesPlan {
  id: ID!
  items: JSON!
  planType: String
  state: String!
}

"""
Autogenerated input type of SalesPlanComplete
"""
input SalesPlanCompleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  salesPlanId: ID!
}

"""
Autogenerated return type of SalesPlanComplete
"""
type SalesPlanCompletePayload {
  SalesPlan: SalesPlan

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

"""
Autogenerated input type of SalesPlanContinue
"""
input SalesPlanContinueInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  salesPlanId: ID!
}

"""
Autogenerated return type of SalesPlanContinue
"""
type SalesPlanContinuePayload {
  SalesPlan: SalesPlan

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

"""
Attributes for sales plan.
"""
input SalesPlanInput {
  id: ID

  """
  Required variants and quantities
  """
  items: JSON

  """
  parent plan id
  """
  planId: ID

  """
  Sales plan type, e.g. 'online' or 'offline'
  """
  planType: String

  """
  pendding, completed
  """
  state: String
}

"""
Autogenerated return type of SalesPlanSave
"""
type SalesPlanSavePayload {
  SalesPlan: SalesPlan

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

type Salesman {
  feishuUser: FeishuUser!
  id: ID!
  name: String!
  terminalVisits(endTime: ISO8601DateTime, startTime: ISO8601DateTime): [TerminalVisit!]!
  terminals: [Terminal!]
}

type Shipment {
  cost: Float
  createdAt: ISO8601DateTime
  id: ID!
  provider: String
  providerName: String
  routes: JSON
  trackingNumber: String
}

"""
Autogenerated input type of ShipmentImportShunfengBill
"""
input ShipmentImportShunfengBillInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Shunfeng billing file
  """
  file: Upload!
}

"""
Autogenerated return type of ShipmentImportShunfengBill
"""
type ShipmentImportShunfengBillPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  total: Float!
}

"""
Autogenerated input type of ShipmentSyncRoutes
"""
input ShipmentSyncRoutesInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Shipment id
  """
  id: String
}

"""
Autogenerated return type of ShipmentSyncRoutes
"""
type ShipmentSyncRoutesPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  shipment: Shipment
}

"""
Autogenerated input type of ShipmentUpdateCost
"""
input ShipmentUpdateCostInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String

  """
  Shipment cost
  """
  cost: Float!

  """
  Shipment id
  """
  id: String!
}

"""
Autogenerated return type of ShipmentUpdateCost
"""
type ShipmentUpdateCostPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  shipment: Shipment
}

type ShippingAddress {
  city: String!
  detail: String!
  district: String!
  id: ID!
  isDefault: Boolean!
  name: String!
  phone: String!
  province: String!
}

"""
Autogenerated return type of ShippingAddressCreate
"""
type ShippingAddressCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  shippingAddress: ShippingAddress
}

"""
Attributes for shipping address
"""
input ShippingAddressInput {
  city: String
  dealerId: ID
  detail: String
  district: String
  id: ID
  name: String
  phone: String
  province: String
}

"""
Autogenerated input type of ShippingAddressSetDefault
"""
input ShippingAddressSetDefaultInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  dealerId: ID
  id: ID
}

"""
Autogenerated return type of ShippingAddressSetDefault
"""
type ShippingAddressSetDefaultPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  shippingAddress: ShippingAddress
}

"""
Autogenerated return type of ShippingAddressUpdate
"""
type ShippingAddressUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  shippingAddress: ShippingAddress
}

type Shop {
  dailyAdExpense: JSON
  dailyAdRoi(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON
  dailySales: JSON
  expenses: [Expense!]
  gmv(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): JSON
  id: ID
  monthlySales: JSON
  name: String
  orders: [ShopOrder!]
  shopType: ShopType
  totalExpenses: Float
  totalSales: Float
  weeklySales: JSON
}

"""
Autogenerated return type of ShopCreate
"""
type ShopCreatePayload {
  category: Shop

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

input ShopInput {
  id: ID!

  """
  Required for creating a new shop.
  """
  name: String

  """
  Required for creating a new shop.
  """
  shopType: ShopType
}

type ShopLineItem {
  amount: Float!
  id: ID!
  isGift: Boolean
  name: String!
  price: Float!
  qty: Int!
  skuId: String!
}

type ShopOrder {
  agent: Agent
  freeAmount: Float
  freight: Float
  id: ID!
  lId: String
  lineItems: [ShopLineItem!]
  logisticsCompany: String
  oId: Int
  orderDate: ISO8601DateTime
  paidAmount: Float
  payAmount: Float
  payDate: ISO8601DateTime
  receiverAddress: String
  receiverCity: String
  receiverDistrict: String
  receiverMobile: String
  receiverName: String
  receiverState: String
  sendDate: ISO8601DateTime
  shop: Shop
  shopBuyerId: String
  shopName: String
  shopUser: ShopUser
  soId: String
  status: String
  totalCost: Float
  totalProfit: Float
}

type ShopOrderPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [ShopOrder!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
店铺类型
"""
enum ShopType {
  """
  代销
  """
  agency

  """
  直营
  """
  directly
}

"""
Autogenerated return type of ShopUpdate
"""
type ShopUpdatePayload {
  category: Shop

  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
}

type ShopUser {
  city: String
  detail: String!
  district: String
  id: ID!
  lastOrderDate: ISO8601DateTime
  name: String!
  orders: [ShopOrder!]
  ordersCount: Int!
  phone: String!
  province: String
  totalAmount: Float!
}

type ShopUserPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [ShopUser!]!
  nodesCount: Int!
  pagesCount: Int!
}

enum ShopUsersOrder {
  ORDERS_COUNT
  RECENT
  TOTAL_AMOUNT
}

"""
Autogenerated input type of SignIn
"""
input SignInInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
  phone: String!
}

"""
Autogenerated return type of SignIn
"""
type SignInPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]
  token: String
  user: User
}

type SlColumn {
  createdAt: ISO8601DateTime!
  id: ID!
  label: String
  name: String!
  options: JSON!
  placeholder: String
  position: Int!
  privateType: SlColumnPrivateType!
  publicType: String!
  rules: JSON!
  updatedAt: ISO8601DateTime!
}

input SlColumnInput {
  _destroy: Boolean
  id: ID
  label: String
  name: String
  options: JSON
  placeholder: String
  position: Int
  privateType: SlColumnPrivateType
  publicType: String
  rules: JSON
}

enum SlColumnPrivateType {
  boolean
  date
  daterange
  datetime
  decimal
  float
  inet
  int4range
  int8range
  integer
  json
  jsonb
  money
  numrange
  point
  string
  string_array
  text
  time
  tsrange
  tstzrange
  uuid
}

type SlRow {
  createdAt: ISO8601DateTime!
  data: JSON!
  id: ID!

  """
  pendding, approved, rejected
  """
  state: String!
  updatedAt: ISO8601DateTime!
  wechatUser: WechatUser
}

"""
Autogenerated input type of SlRowApprove
"""
input SlRowApproveInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  slRowId: ID!
}

"""
Autogenerated return type of SlRowApprove
"""
type SlRowApprovePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  slRow: SlRow
}

"""
Autogenerated input type of SlRowReject
"""
input SlRowRejectInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  slRowId: ID!
}

"""
Autogenerated return type of SlRowReject
"""
type SlRowRejectPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  slRow: SlRow
}

type SlTable {
  createdAt: ISO8601DateTime!
  desc: String!
  id: ID!
  name: String!
  slColumns: [SlColumn!]
  slRows: [SlRow!]
  updatedAt: ISO8601DateTime!
}

input SlTableInput {
  activityId: ID
  desc: String
  id: ID
  name: String
  slColumns: [SlColumnInput!]
}

type Storage {
  degree: Float!
  id: ID!
  name: String!
  price: Float!
  stock: Float!
  volume: Float!
}

type Tag {
  id: ID!
  name: String!
  taggingsCount: Int!
}

type TagPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Tag!]!
  nodesCount: Int!
  pagesCount: Int!
}

type Terminal {
  address: Address
  competitorInfo: String
  contact: String
  dealer: Dealer
  fullAddress: String
  id: ID!
  level: String!
  name: String!
  phone: String
  terminalType: String!
}

"""
Autogenerated return type of TerminalCreate
"""
type TerminalCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  terminal: Terminal
}

"""
Autogenerated input type of TerminalDelete
"""
input TerminalDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of TerminalDelete
"""
type TerminalDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  terminal: Terminal
}

"""
门店输入信息
"""
input TerminalInput {
  """
  门店地址
  """
  address: AddressInput

  """
  竞品信息
  """
  competitorInfo: String

  """
  联系人
  """
  contact: String

  """
  经销商ID
  """
  dealerId: ID
  id: ID

  """
  门店分级
  """
  level: String!

  """
  门店名称
  """
  name: String!

  """
  电话
  """
  phone: String

  """
  销售ID
  """
  salesmanId: ID
}

"""
Autogenerated return type of TerminalUpdate
"""
type TerminalUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  terminal: Terminal
}

type TerminalVisit {
  createdAt: ISO8601DateTime!
  displayPhoto: String!
  doorwayPhoto: String!
  id: ID!
  orderInfo: String
  orderPhoto: String
  salesman: Salesman!
  terminal: Terminal!
  updatedAt: ISO8601DateTime!
  visitInfo: String!
}

"""
Autogenerated return type of TerminalVisitCreate
"""
type TerminalVisitCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  salesman: Salesman
  terminalVisit: TerminalVisit
}

"""
Autogenerated input type of TerminalVisitDelete
"""
input TerminalVisitDeleteInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID
}

"""
Autogenerated return type of TerminalVisitDelete
"""
type TerminalVisitDeletePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  terminalVisit: TerminalVisit
}

input TerminalVisitInput {
  createdAt: ISO8601DateTime
  displayPhoto: String!
  doorwayPhoto: String!
  id: ID
  orderInfo: String
  orderPhoto: String
  salesmanId: ID!
  terminalId: ID!
  visitInfo: String!
}

"""
Autogenerated return type of TerminalVisitUpdate
"""
type TerminalVisitUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  terminalVisit: TerminalVisit
}

"""
时间粒度
"""
enum TimeGranularity {
  """
  表示天
  """
  STAT_TIME_GRANULARITY_DAILY

  """
  表示小时
  """
  STAT_TIME_GRANULARITY_HOURLY
}

type Transfer {
  amount: Float
  createdAt: ISO8601DateTime
  id: ID!
  metadata: JSON
  transferType: String
  transferableId: ID
  transferableType: String
}

scalar Upload

type User {
  createdAt: ISO8601DateTime!
  id: ID!
  locked: Boolean!
  name: String!
  phone: String!
  roles: [String!]
  token: String
}

"""
Autogenerated return type of UserBatchCreate
"""
type UserBatchCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  createdUsers: [User!]!
  errors: ValidationErrors
}

"""
Inputs to batch create users.
"""
input UserBatchInput {
  """
  User list
  """
  users: [UserInput!]!
}

"""
Autogenerated input type of UserChangePassword
"""
input UserChangePasswordInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  password: String!
}

"""
Autogenerated return type of UserChangePassword
"""
type UserChangePasswordPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  user: User
}

"""
Autogenerated return type of UserCreate
"""
type UserCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  user: User
}

"""
Specifies the input fields required to create or update a user.
"""
input UserInput {
  """
  Specifies the user to update or create a new user if absent.
  """
  id: ID

  """
  set true to block user
  """
  locked: Boolean

  """
  Required for creating a new product.
  """
  name: String

  """
  Required for creating a new user.
  """
  password: String

  """
  Required for creating a new user.
  """
  phone: String

  """
  admin,opration,sales
  """
  roles: [String!]
}

"""
Autogenerated return type of UserUpdate
"""
type UserUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  user: User
}

type ValidationErrors {
  details: String!
  fullMessages: [String!]!
}

type Variant {
  barcode: String
  bottleCount: Int
  bottleQuantity: Int!
  checkInventory(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int!
  closingInventory(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int!
  compareAtPrice: Float!
  cost: Float
  costPrice: Float
  createdAt: ISO8601DateTime!
  displayTitle: String!
  erpcode: String
  finished: Boolean!
  hierarchies: [Hierarchy!]
  id: ID!
  imageUrl: String
  instoreInventory(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int!
  inventoryLogs(page: Int, perPage: Int): InventoryLogPage
  inventoryLogsCount: Int!
  inventoryQuantity: Int!
  isJt: Boolean
  leadTime: Float
  leaf: Boolean
  logData: JSON
  minInventoryQuantity: Int!
  openingInventory(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int!
  originCostPrice: Float
  outstoreInventory(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int!
  parents: [Variant!]
  position: Int!
  price: Float!
  productCategoryId: ID!
  productId: ID!
  productionCount(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int
  rebateRevisions: JSON
  revisionAt(at: ISO8601DateTime!): Variant
  saleTax: Float!
  salesCount(endTime: ISO8601DateTime!, startTime: ISO8601DateTime!): Int
  tagList: [String!]
  title: String!
  totalVolume: Int
  updatedAt: ISO8601DateTime!
  weight: Float
}

"""
Autogenerated return type of VariantCreate
"""
type VariantCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  variant: Variant
}

"""
Attributes for variant.
"""
input VariantInput {
  barcode: String
  bottleCount: Int
  compareAtPrice: Float
  cost: Float
  costPrice: Float
  erpcode: String
  hierarchies: [HierarchyInput!]
  id: ID
  imageUrl: String
  inventoryQuantity: Int
  leadTime: Float
  minInventoryQuantity: Int
  originCostPrice: Float
  position: Int
  price: Float
  productId: ID
  rebateRevisions: JSON
  tagList: String
  title: String
  totalVolume: Int
  weight: Float
}

type VariantPage {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  nodes: [Variant!]!
  nodesCount: Int!
  pagesCount: Int!
}

"""
Autogenerated input type of VariantSync
"""
input VariantSyncInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: ID!
}

"""
Autogenerated return type of VariantSync
"""
type VariantSyncPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  variant: Variant
}

"""
Autogenerated return type of VariantUpdate
"""
type VariantUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  variant: Variant
}

"""
Attributes for batch update variants.
"""
input VariantsBatchUpdateInput {
  items: [VariantInput!]!
}

"""
Autogenerated return type of VariantsBatchUpdate
"""
type VariantsBatchUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  updated: [Variant!]
}

"""
Attributes for update variants.
"""
input VariantsUpdateInput {
  compareAtPrice: Float
  leadTime: Float
  minInventoryQuantity: Int
  price: Float
  tags: [String!]!
  weight: Float
}

"""
Autogenerated return type of VariantsUpdate
"""
type VariantsUpdatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  updated: Int
}

type Weather {
  date: String
  humidity: Int
  id: ID!
  location: String!
  recordAt: ISO8601DateTime
  tempMax: Int
  tempMin: Int
  temperature: Int
  uvText: String
  weatherText: String
}

type WechatUser {
  city: String
  country: String
  createdAt: ISO8601DateTime!
  headimgurl: String!
  id: ID!
  nickname: String!
  openid: String!
  province: String
  sex: String!
  subscribe: Boolean!
  subscribeTime: ISO8601DateTime
}

type WorkOrder {
  createdAt: ISO8601DateTime!
  id: ID!
  rawProduct: RawProduct!
  recipe: JSON
  weight: String
}

"""
Autogenerated input type of WorkOrderBlender
"""
input WorkOrderBlenderInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int
  rawProductId: ID!
  weight: Float!
}

"""
Autogenerated return type of WorkOrderBlender
"""
type WorkOrderBlenderPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  id: Int
  rawProduct: RawProduct
  result: JSON
  weight: Float
}

"""
Autogenerated input type of WorkOrderCreate
"""
input WorkOrderCreateInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  rawProductId: ID!
  weight: Float!
}

"""
Autogenerated return type of WorkOrderCreate
"""
type WorkOrderCreatePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: ValidationErrors
  workOrder: WorkOrder
}
